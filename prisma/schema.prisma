datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  nickname String?

  cups  Cup[]
  likes Like[]

  itemComments ItemComment[]
  cupComments  CupComment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Cup {
  id              String       @id @default(cuid())
  title           String
  description     String
  thumbnail       String       @db.Text
  thumbnailWidth  Int
  thumbnailHeight Int
  playCount       Int          @default(0)
  type            CupType
  items           Item[]
  comments        CupComment[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  likes Like[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Item {
  id             String  @id @default(cuid())
  url            String  @db.Text
  description    String?
  width          Int?
  height         Int?
  publicId       String?
  videoThumbnail String?

  winCount Int @default(0)

  comments ItemComment[]

  cup   Cup    @relation(fields: [cupId], references: [id], onDelete: Cascade)
  cupId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([cupId])
}

model ItemComment {
  id   String @id @default(cuid())
  text String @db.Text

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  item   Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([itemId])
}

model CupComment {
  id   String @id @default(cuid())
  text String @db.Text

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  cup    Cup    @relation(fields: [cupId], references: [id], onDelete: Cascade)
  cupId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([cupId])
}

model Like {
  id String @id @default(cuid())

  cup    Cup    @relation(fields: [cupId], references: [id], onDelete: Cascade)
  cupId  String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([cupId])
  @@index([userId])
}

enum CupType {
  IMAGE
  VIDEO
}
